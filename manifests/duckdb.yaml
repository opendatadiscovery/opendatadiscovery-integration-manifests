id: duckdb
name: DuckDB
description: |
  DuckDB integration
blocks:
  - title: Overview
    content: |+
      The DuckDB integration significantly enhances data discovery and observability capabilities for DuckDB databases,
      providing an efficient and powerful solution for users seeking to optimize their data management experience.
      ## Utilizing ODD Collector with DuckDB
      To fully harness the potential of OpenDataDiscovery in conjunction with DuckDB,
      users should utilize the [ODD Collector](https://github.com/opendatadiscovery/odd-collector). This dedicated agent relies exclusively on `information_schema`
      to access and retrieve vital information about tables and views, including their associated schemas
      and metadata. By doing so, the ODD Collector ensures a non-intrusive approach that prevents any performance
      impact on the database.


      > DuckDB integration cannot utilize an in-memory database because it lacks
      the ability to connect and share data seamlessly across multiple processes or sessions.
      > DuckDB database files cannot be accessed in parallel,
      hence when other process access the database file, ODD collector might return an error message about the file being locked until it is available to access.

  - title: Configure
    content: |+
      ## DuckDB
      Create database: to create table with CLI use command `duckdb` to create in-memory database
      or `duckdb /path/to/your/database.db` to create persistent database.

      ````sql
      CREATE TABLE users (
          id INTEGER PRIMARY KEY,
          name VARCHAR,
          email VARCHAR
      );

      INSERT INTO users (name, email) VALUES ('John Doe', 'john@example.com');
      ````
      Use .quit to quit DuckDB shell.

      ## ODD Platform
      To integrate ODD Collector with the ODD Platform, users must first establish a collector entity within the platform by following these steps:

      1. Navigate to the "Management" section and select "Collectors".
      2. Click on the "Add Collector" button to initiate the process.
      3. Input a unique name for the collector and, optionally, provide a namespace to further categorize and organize the entity. Additionally, you may include a brief description to give more context and information about the collector.
      4. Click "Save" to finalize the setup, and take note of the generated token. This token will be required for incorporating it into the ODD Collector's configuration YAML file, ensuring secure communication between the two components.

      ## ODD Collector
      The process of configuring the ODD Collector involves creating and customizing a single, well-structured YAML configuration file

      ````yaml
      # ODD Platform's host URL
      platform_host_url: https://your.odd.platform

      # Default pulling interval in minutes
      default_pulling_interval: 10

      # Collector's specific security token
      token: ""

      plugins:
        - type: duckdb
          # Data source's name
          name: duckdb_adapter
          # List of paths to the db files or to the folders containing db files
          paths: [ /path/to/local/file.db, /path/to/local/dir ]
          # Optional name of host, by default it's set to localhost
          host: host

      ````
    snippets:
      - template: |+
          ````yaml
          platform_host_url: {{ platform_url }}
          default_pulling_interval: 10
          token: <Security token>
          plugins:
            - type: duckdb
              name: {{ ds_name }}
              paths: [] # List of paths to the db files or to the folders containing db files
              host: {{ ds_host }}
          ````
        arguments:
          - parameter: platform_url
            type: STRING
            static: true
          - parameter: ds_name
            name: Data source name
            type: STRING
          - parameter: ds_host
            name: Data source host
            type: STRING