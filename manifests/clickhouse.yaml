id: clickhouse
name: ClickHouse
description: |
  ClickHouse integration
blocks:
  - title: Overview
    content: |+
      The ClickHouse integration significantly improves data exploration and monitoring capabilities for ClickHouse databases, delivering an effective and powerful solution for users aiming to enhance their data management experience.
      ## Utilizing ODD Collector with ClickHouse
      To fully exploit the potential of OpenDataDiscovery in combination with ClickHouse,
      users should make use of the ODD Collector. This specialized agent relies solely on system database tables
      to access and obtain crucial information about tables and views, including their related schemas and metadata.
      In doing so, the ODD Collector guarantees a non-disruptive approach that avoids any performance impact on the database.

      > It is essential to understand that since the ODD Collector does not execute additional analytical queries against the actual data,
      some metrics may not reflect precise values.
  - title: Configure
    content: |+
      ## ClickHouse
      It is recommended to create a separate ClickHouse user with access policy to the `system` tables only:
      ````sql
      CREATE USER <username>;
      GRANT SELECT ON system.* TO <username>;
      ALTER USER <username> IDENTIFIED WITH plaintext_password BY '<password>';
      ````

      ## ODD Platform
      To integrate ODD Collector with the ODD Platform, users must first establish a collector entity within the platform by following these steps:

      1. Navigate to the "Management" section and select "Collectors".
      2. Click on the "Add Collector" button to initiate the process.
      3. Input a unique name for the collector and, optionally, provide a namespace to further categorize and organize the entity. Additionally, you may include a brief description to give more context and information about the collector.
      4. Click "Save" to finalize the setup, and take note of the generated token. This token will be required for incorporating it into the ODD Collector's configuration YAML file, ensuring secure communication between the two components.

      ## ODD Collector
      The process of configuring the ODD Collector involves creating and customizing a single, well-structured YAML configuration file

      ````yaml
      # ODD Platform's host URL
      platform_host_url: https://your.odd.platform

      # Default pulling interval in minutes
      default_pulling_interval: 10

      # Collector's specific security token
      token: ""

      plugins:
        - type: clickhouse
          # Data source's name
          name: clickhouse_adapter
          # Optional Data source's description
          description: "clickhouse sample database"
          # ClickHouse database name
          database: database
          # ClickHouse host
          host: host
          # ClickHouse port
          port: 5432
          # ClickHouse user
          user: user
          # MySQL user password
          password: password
      ````
    snippets:
      - template: |+
          ````yaml
          platform_host_url: {{ platform_url }}
          default_pulling_interval: 1
          token: <Security token>
          plugins:
            - type: clickhouse
              name: {{ ds_name }}
              description: {{ plugin_description }}
              database: {{ plugin_database }}
              host: {{ plugin_host }}
              port: {{ plugin_port }}
              user: {{ plugin_user }}
              password: <Password for {{ plugin_user }}>
          ````
        arguments:
          - parameter: platform_url
            type: STRING
            static: true
          - parameter: ds_name
            name: Data source name
            type: STRING
          - parameter: plugin_description
            name: Data source description
            type: STRING
          - parameter: plugin_database
            name: Database name
            type: STRING
          - parameter: plugin_host
            name: Host
            type: STRING
          - parameter: plugin_port
            name: Port
            type: INTEGER
          - parameter: plugin_user
            name: User
            type: STRING